"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6244],{8202:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"testing/unit-testing","title":"Unit Testing","description":"Comprehensive unit testing documentation for BulletBuzz using Jest.","source":"@site/docs/testing/unit-testing.md","sourceDirName":"testing","slug":"/testing/unit-testing","permalink":"/bulletbuzz/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/tjsingleton/bulletbuzz/edit/main/docs/docs/testing/unit-testing.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Testing","permalink":"/bulletbuzz/docs/category/testing"},"next":{"title":"Headless Simulation","permalink":"/bulletbuzz/docs/testing/headless-simulation"}}');var i=t(4848),a=t(8453);const r={sidebar_position:1},l="Unit Testing",c={},o=[{value:"Overview",id:"overview",level:2},{value:"Test Structure",id:"test-structure",level:2},{value:"Test Categories",id:"test-categories",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Basic Commands",id:"basic-commands",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Test Examples",id:"test-examples",level:2},{value:"Game Initialization",id:"game-initialization",level:3},{value:"Game State Management",id:"game-state-management",level:3},{value:"Game Loop Testing",id:"game-loop-testing",level:3},{value:"Custom Matchers",id:"custom-matchers",level:2},{value:"Game State Matcher",id:"game-state-matcher",level:3},{value:"Player Matcher",id:"player-matcher",level:3},{value:"Test Utilities",id:"test-utilities",level:2},{value:"Test Game Creation",id:"test-game-creation",level:3},{value:"Game Step Helper",id:"game-step-helper",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Data",id:"test-data",level:3},{value:"Test Maintenance",id:"test-maintenance",level:3},{value:"Coverage Goals",id:"coverage-goals",level:2},{value:"Line Coverage",id:"line-coverage",level:3},{value:"Test Categories",id:"test-categories-1",level:3},{value:"Debugging Tests",id:"debugging-tests",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Commands",id:"debug-commands",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"unit-testing",children:"Unit Testing"})}),"\n",(0,i.jsx)(n.p,{children:"Comprehensive unit testing documentation for BulletBuzz using Jest."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"BulletBuzz includes 28 comprehensive unit tests covering all game systems using the Jest testing framework."}),"\n",(0,i.jsx)(n.h2,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(n.h3,{id:"test-categories",children:"Test Categories"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),": Game creation and configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Game State Management"}),": State tracking and updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Game Loop"}),": Time stepping and updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AI and Auto-Pathing"}),": AI behavior testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enemy Spawning"}),": Enemy generation and management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Combat System"}),": Fighting and damage mechanics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pickup System"}),": XP and heart collection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Level Progression"}),": XP and leveling system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Game Over Conditions"}),": End game scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shop System"}),": Upgrade selection and management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance and Memory"}),": Memory usage and performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration Validation"}),": Parameter validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Game Reset"}),": State reset functionality"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"basic-commands",children:"Basic Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run tests in CI mode\nnpm run test:ci\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['<rootDir>/tests'],\n  testMatch: ['**/*.test.ts'],\n  setupFilesAfterEnv: ['<rootDir>/tests/setup.ts']\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-examples",children:"Test Examples"}),"\n",(0,i.jsx)(n.h3,{id:"game-initialization",children:"Game Initialization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"describe('BulletBuzzGame', () => {\n  describe('Initialization', () => {\n    test('should create game with default configuration', () => {\n      const game = new BulletBuzzGame();\n      const state = game.getGameState();\n      \n      expect(state.playerHp).toBe(10);\n      expect(state.level).toBe(1);\n      expect(state.gameOver).toBe(false);\n    });\n\n    test('should create game with custom configuration', () => {\n      const game = new BulletBuzzGame({\n        playerHp: 15,\n        playerSpeed: 1.0\n      });\n      \n      const state = game.getGameState();\n      expect(state.playerHp).toBe(15);\n    });\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"game-state-management",children:"Game State Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"describe('Game State Management', () => {\n  test('should return valid game state', () => {\n    const game = new BulletBuzzGame();\n    const state = game.getGameState();\n    \n    expect(state).toBeValidGameState();\n  });\n\n  test('should track memory usage', () => {\n    const game = new BulletBuzzGame();\n    const memory = game.getMemory();\n    \n    expect(memory.usage).toBeGreaterThan(0);\n    expect(memory.usage).toBeLessThanOrEqual(100);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"game-loop-testing",children:"Game Loop Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"describe('Game Loop', () => {\n  test('should step game forward in time', () => {\n    const game = new BulletBuzzGame();\n    const initialState = game.getGameState();\n    \n    game.step(1/60);\n    const newState = game.getGameState();\n    \n    expect(newState.gameTime).toBeGreaterThan(initialState.gameTime);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-matchers",children:"Custom Matchers"}),"\n",(0,i.jsx)(n.h3,{id:"game-state-matcher",children:"Game State Matcher"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"expect.extend({\n  toBeValidGameState(received) {\n    const pass = received &&\n      typeof received.playerHp === 'number' &&\n      typeof received.level === 'number' &&\n      typeof received.gameOver === 'boolean';\n    \n    return {\n      pass,\n      message: () => `Expected valid game state, got ${JSON.stringify(received)}`\n    };\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"player-matcher",children:"Player Matcher"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"expect.extend({\n  toHaveValidPlayer(received) {\n    const pass = received &&\n      typeof received.playerHp === 'number' &&\n      typeof received.playerX === 'number' &&\n      typeof received.playerY === 'number';\n    \n    return {\n      pass,\n      message: () => `Expected valid player, got ${JSON.stringify(received)}`\n    };\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,i.jsx)(n.h3,{id:"test-game-creation",children:"Test Game Creation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function createTestGame(config?: GameConfig): BulletBuzzGame {\n  return new BulletBuzzGame({\n    spawnInterval: 1.0,\n    minSpawnInterval: 0.5,\n    enemySpeed: 0.1,\n    ...config\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"game-step-helper",children:"Game Step Helper"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function runGameForSteps(game: BulletBuzzGame, steps: number): void {\n  for (let i = 0; i < steps; i++) {\n    game.step(1/60);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Descriptive Names"}),": Use clear, descriptive test names"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouped Tests"}),": Group related tests in describe blocks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolated Tests"}),": Each test should be independent"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clean Setup"}),": Set up test data consistently"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-data",children:"Test Data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent Data"}),": Use consistent test data across tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Cases"}),": Test boundary conditions and edge cases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Conditions"}),": Test error handling and invalid inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Test performance-critical code paths"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-maintenance",children:"Test Maintenance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep Updated"}),": Update tests when code changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Refactor Tests"}),": Improve test code as the codebase evolves"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor Coverage"}),": Track and improve test coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Review Failures"}),": Act quickly on test failures"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"coverage-goals",children:"Coverage Goals"}),"\n",(0,i.jsx)(n.h3,{id:"line-coverage",children:"Line Coverage"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target"}),": >90% line coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Critical Paths"}),": 100% coverage for critical game logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": 100% coverage for error paths"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Public API"}),": 100% coverage for public methods"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-categories-1",children:"Test Categories"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Tests"}),": Test individual components in isolation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Tests"}),": Test component interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Tests"}),": Test performance characteristics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Tests"}),": Test memory usage patterns"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Async Tests"}),": Use async/await for asynchronous tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timing Issues"}),": Use appropriate timeouts for timing-dependent tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State Pollution"}),": Reset state between tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock Dependencies"}),": Mock external dependencies appropriately"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run specific test file\nnpm test -- tests/BulletBuzzGame.test.ts\n\n# Run specific test\nnpm test -- --testNamePattern="should create game"\n\n# Debug mode\nnpm test -- --verbose --detectOpenHandles\n'})})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);