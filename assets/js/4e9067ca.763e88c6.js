"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3824],{4539:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/testing-api","title":"Testing API","description":"Documentation for the testing and simulation functionality.","source":"@site/docs/api/testing-api.md","sourceDirName":"api","slug":"/api/testing-api","permalink":"/bulletbuzz/docs/api/testing-api","draft":false,"unlisted":false,"editUrl":"https://github.com/tjsingleton/bulletbuzz/edit/main/docs/docs/api/testing-api.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"AI API","permalink":"/bulletbuzz/docs/api/ai-api"},"next":{"title":"Screenshot API","permalink":"/bulletbuzz/docs/api/screenshot-api"}}');var i=s(4848),r=s(8453);const a={sidebar_position:3},l="Testing API",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Headless Testing",id:"headless-testing",level:2},{value:"Test Runner",id:"test-runner",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Memory Usage",id:"memory-usage",level:3},{value:"Performance Metrics",id:"performance-metrics",level:3},{value:"Debug Commands",id:"debug-commands",level:2},{value:"Browser Console",id:"browser-console",level:3},{value:"Testing Utilities",id:"testing-utilities",level:2},{value:"Test Helpers",id:"test-helpers",level:3},{value:"Custom Matchers",id:"custom-matchers",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Testing",id:"basic-testing",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Performance Testing",id:"performance-testing-1",level:3},{value:"Balance Testing",id:"balance-testing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-api",children:"Testing API"})}),"\n",(0,i.jsx)(n.p,{children:"Documentation for the testing and simulation functionality."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Testing API provides tools for headless testing, simulation, and performance monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"headless-testing",children:"Headless Testing"}),"\n",(0,i.jsx)(n.h3,{id:"test-runner",children:"Test Runner"}),"\n",(0,i.jsx)(n.p,{children:"The test runner provides automated balance testing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"node test-runner.js\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Quick test\nnode test-runner.js --quick\n\n# Custom parameters\nnode test-runner.js --runs 10 --target 5 --time 300\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.h3,{id:"memory-usage",children:"Memory Usage"}),"\n",(0,i.jsx)(n.p,{children:"Track memory usage during testing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const memory = game.getMemory();\nconsole.log(`Memory Usage: ${memory.usage}%`);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,i.jsx)(n.p,{children:"Monitor game performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const state = game.getGameState();\nconsole.log(`Frame Rate: ${state.frameRate}`);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,i.jsx)(n.h3,{id:"browser-console",children:"Browser Console"}),"\n",(0,i.jsx)(n.p,{children:"Use these commands in the browser console:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"debugGame.logState()        // Log current game state\ndebugGame.getMemory()       // Check memory usage\ndebugGame.logPerformance()  // Performance metrics\ndebugGame.reset()          // Reset game\ndebugGame.pause()          // Toggle pause\ndebugGame.spawnEnemy()     // Force spawn enemy\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-utilities",children:"Testing Utilities"}),"\n",(0,i.jsx)(n.h3,{id:"test-helpers",children:"Test Helpers"}),"\n",(0,i.jsx)(n.p,{children:"The testing system includes helper functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Create test game instance\nconst testGame = createTestGame();\n\n// Run game for specific steps\nrunGameForSteps(testGame, 1000);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"custom-matchers",children:"Custom Matchers"}),"\n",(0,i.jsx)(n.p,{children:"Jest custom matchers for game testing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"expect(gameState).toBeValidGameState();\nexpect(player).toHaveValidPlayer();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-testing",children:"Basic Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Create test game\nconst game = new BulletBuzzGame();\n\n// Run simulation\nfor (let i = 0; i < 1000; i++) {\n  game.step(1/60);\n  \n  const state = game.getGameState();\n  if (state.gameOver) break;\n}\n\n// Check results\nconsole.log(`Level reached: ${game.getLevel()}`);\nconsole.log(`Enemies killed: ${game.getEnemiesKilled()}`);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Monitor performance\nsetInterval(() => {\n  const memory = game.getMemory();\n  const state = game.getGameState();\n  \n  console.log(`FPS: ${state.frameRate}`);\n  console.log(`Memory: ${memory.usage}%`);\n}, 1000);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolated Tests"}),": Each test should be independent"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Names"}),": Use descriptive test names"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proper Setup"}),": Set up test data consistently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleanup"}),": Clean up after tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-testing-1",children:"Performance Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Monitoring"}),": Track memory usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frame Rate"}),": Monitor frame rate consistency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Testing"}),": Test with many objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stress Testing"}),": Test edge cases"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"balance-testing",children:"Balance Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Success Rate"}),": Track win/loss ratios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time Analysis"}),": Measure time to reach goals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty Scaling"}),": Test progression curves"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameter Tuning"}),": Optimize game balance"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);