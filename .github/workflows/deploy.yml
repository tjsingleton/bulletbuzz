name: Deploy Game and Documentation

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript game
      run: npm run build
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install MkDocs
      run: pip install mkdocs mkdocs-material
      
    - name: Build documentation
      run: mkdocs build
      
    - name: Organize site structure
      run: |
        set -e
        echo "Contents of project root after build:"
        ls -l
        echo "Contents of dist directory:"
        ls -l dist/
        echo "Contents of assets directory:"
        ls -l assets/
        
        # Create game directory
        mkdir -p site/game
        
        # Copy game files
        cp index.html site/game/
        cp -r dist site/game/
        
        # Copy assets with error handling
        if [ -f "assets/logo.png" ]; then
          cp assets/logo.png site/game/
        else
          echo "‚ö†Ô∏è Warning: logo.png not found in assets/"
        fi
        
        if [ -f "assets/favicon.ico" ]; then
          cp assets/favicon.ico site/game/
        else
          echo "‚ö†Ô∏è Warning: favicon.ico not found in assets/"
        fi
        
        if [ -f "assets/logo-192.png" ]; then
          cp assets/logo-192.png site/game/
        else
          echo "‚ö†Ô∏è Warning: logo-192.png not found in assets/"
        fi
        
        if [ -f "assets/logo-512.png" ]; then
          cp assets/logo-512.png site/game/
        else
          echo "‚ö†Ô∏è Warning: logo-512.png not found in assets/"
        fi
        
        if [ -f "assets/game-screenshot.png" ]; then
          cp assets/game-screenshot.png site/
        else
          echo "‚ö†Ô∏è Warning: game-screenshot.png not found in assets/"
        fi
        
        # Copy documentation files
        cp README.md site/
        cp LICENSE site/
        
        echo "Contents of site/game after copy:"
        ls -la site/game/
        echo "Contents of site root after copy:"
        ls -la site/
        
        # Verify critical files exist
        if [ ! -f "site/game/index.html" ]; then
          echo "‚ùå Error: index.html not copied to site/game/"
          exit 1
        fi
        
        if [ ! -f "site/game/dist/game-ui.js" ]; then
          echo "‚ùå Error: game-ui.js not copied to site/game/dist/"
          exit 1
        fi
        
        echo "‚úÖ All critical files verified"
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'site'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting 30 seconds for deployment to propagate..."
        sleep 30
        
    - name: Test deployment
      run: |
        echo "üß™ Testing deployed site..."
        
        # Test game page
        GAME_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tjsingleton.github.io/bulletbuzz/game/)
        echo "Game page status: $GAME_STATUS"
        
        if [ "$GAME_STATUS" = "200" ]; then
          echo "‚úÖ Game page accessible"
        else
          echo "‚ùå Game page returned status $GAME_STATUS"
        fi
        
        # Test documentation page
        DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tjsingleton.github.io/bulletbuzz/)
        echo "Documentation page status: $DOCS_STATUS"
        
        if [ "$DOCS_STATUS" = "200" ]; then
          echo "‚úÖ Documentation page accessible"
        else
          echo "‚ùå Documentation page returned status $DOCS_STATUS"
        fi
        
        # Test critical game files
        GAME_UI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tjsingleton.github.io/bulletbuzz/game/dist/game-ui.js)
        echo "Game UI JS status: $GAME_UI_STATUS"
        
        if [ "$GAME_UI_STATUS" = "200" ]; then
          echo "‚úÖ Game UI JavaScript accessible"
        else
          echo "‚ùå Game UI JavaScript returned status $GAME_UI_STATUS"
        fi 