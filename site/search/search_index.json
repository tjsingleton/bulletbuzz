{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BulletBuzz","text":"<p>{ width=\"100\" }</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>\ud83c\udfae Play BulletBuzz Game</p> <p>\ud83d\udcd6 View Documentation</p> <p>\ud83c\udfae Development Mode: Add <code>?speed=10</code> to the URL for 10x game speed!</p>"},{"location":"#what-is-bulletbuzz","title":"\ud83c\udfaf What is BulletBuzz?","text":"<p>BulletBuzz is a bullet heaven game inspired by Brotato and Vampire Survivors, where you survive waves of enemies in an endless arena. The game features:</p> <ul> <li>\ud83e\udde0 Advanced AI: Intelligent auto-pathing with wall avoidance and smart targeting</li> <li>\u2694\ufe0f Bullet Heaven: Survive waves of enemies in an endless arena</li> <li>\ud83c\udfa8 Modern UI: Professional shop modals and detailed game over screens</li> <li>\ud83e\uddea Testing: Comprehensive unit tests and automated screenshot testing</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>TypeScript: Type-safe game development</li> <li>HTML5 Canvas: Game rendering</li> <li>ES Modules: Modern JavaScript modules</li> <li>Node.js: Headless testing environment</li> <li>Jest: Unit testing framework</li> <li>Playwright: Automated browser testing and screenshots</li> </ul>"},{"location":"#core-systems","title":"Core Systems","text":"<ul> <li>Game Loop: Fixed timestep implementation for consistent updates</li> <li>AI System: Auto-pathing with wall avoidance and target tracking</li> <li>Combat System: Automatic axe throwing and collision detection</li> <li>Pickup System: XP and heart collection with attraction mechanics</li> <li>Level System: XP progression and shop management</li> <li>Spawn System: Dynamic enemy and pickup generation</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Game Engine\"\n        Game[Game.ts&lt;br/&gt;Main Game Loop]\n        Player[Player.ts&lt;br/&gt;Player Entity]\n        Enemy[Enemy.ts&lt;br/&gt;Enemy Entities]\n        Axe[Axe.ts&lt;br/&gt;Weapon System]\n        HeartDrop[HeartDrop.ts&lt;br/&gt;Health Pickups]\n        XpDrop[XpDrop.ts&lt;br/&gt;XP Pickups]\n    end\n\n    subgraph \"Systems\"\n        CollisionSystem[CollisionSystem.ts&lt;br/&gt;Collision Detection]\n        LevelSystem[LevelSystem.ts&lt;br/&gt;Level Management]\n        SpawnSystem[SpawnSystem.ts&lt;br/&gt;Enemy Spawning]\n    end\n\n    subgraph \"UI &amp; Rendering\"\n        GameUI[game-ui.ts&lt;br/&gt;User Interface]\n        Canvas[HTML5 Canvas&lt;br/&gt;Rendering]\n    end\n\n    subgraph \"Types &amp; Interfaces\"\n        Types[types.ts&lt;br/&gt;Type Definitions]\n    end\n\n    %% Core relationships\n    Game --&gt; Player\n    Game --&gt; Enemy\n    Game --&gt; Axe\n    Game --&gt; HeartDrop\n    Game --&gt; XpDrop\n\n    %% System relationships\n    Game --&gt; CollisionSystem\n    Game --&gt; LevelSystem\n    Game --&gt; SpawnSystem\n\n    %% UI relationships\n    Game --&gt; GameUI\n    GameUI --&gt; Canvas\n\n    %% Type relationships\n    Game --&gt; Types\n    Player --&gt; Types\n    Enemy --&gt; Types\n    Axe --&gt; Types\n    HeartDrop --&gt; Types\n    XpDrop --&gt; Types\n    CollisionSystem --&gt; Types\n    LevelSystem --&gt; Types\n    SpawnSystem --&gt; Types\n\n    %% System interactions\n    CollisionSystem --&gt; Player\n    CollisionSystem --&gt; Enemy\n    CollisionSystem --&gt; Axe\n    CollisionSystem --&gt; HeartDrop\n    CollisionSystem --&gt; XpDrop\n\n    SpawnSystem --&gt; Enemy\n    LevelSystem --&gt; SpawnSystem\n\n    %% Styling\n    classDef coreClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef systemClass fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef uiClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n    classDef typeClass fill:#fff3e0,stroke:#e65100,stroke-width:2px\n\n    class Game,Player,Enemy,Axe,HeartDrop,XpDrop coreClass\n    class CollisionSystem,LevelSystem,SpawnSystem systemClass\n    class GameUI,Canvas uiClass\n    class Types typeClass\n</code></pre>"},{"location":"#game-features","title":"\ud83c\udfae Game Features","text":""},{"location":"#advanced-ai","title":"\ud83e\udde0 Advanced AI","text":"<ul> <li>Auto-Pathing: Intelligent movement with wall avoidance and target tracking</li> <li>Combat AI: Smart targeting within attack range with automatic axe throwing</li> <li>Pickup Attraction: XP orbs and hearts attract to player within pickup range</li> <li>Robot Vacuum Mode: Efficient pickup collection with pathfinding to drops</li> </ul>"},{"location":"#gameplay-mechanics","title":"\u2694\ufe0f Gameplay Mechanics","text":"<ul> <li>Bullet Heaven: Survive waves of enemies in an endless arena</li> <li>XP System: Level up to unlock new abilities with accurate progress tracking</li> <li>Pickup System: Collect hearts and XP drops with attraction mechanics</li> <li>Shop System: Choose upgrades between levels with auto-shop option</li> <li>Difficulty Scaling: Progressive challenge increase with dynamic spawn rates</li> </ul>"},{"location":"#enhanced-ui","title":"\ud83c\udfa8 Enhanced UI","text":"<ul> <li>Professional Shop Modal: Button-like options with sequential numbering</li> <li>Detailed Game Over Screen: Comprehensive statistics with skull emoji</li> <li>Real-time Stats: Live player and enemy statistics</li> <li>Range Visualization: Attack and pickup range circles</li> <li>XP Progress Bar: Visual progress tracking</li> </ul>"},{"location":"#game-balance","title":"\ud83d\udcca Game Balance","text":""},{"location":"#current-settings","title":"Current Settings","text":"<ul> <li>Player: 10 HP, 0.85 speed, 25 pickup range, 150 attack range</li> <li>Enemies: 0.15 speed, 8s spawn interval</li> <li>Auto-Pathing: 120 avoidance distance, 2.0 strength</li> <li>Difficulty: Single enemy until level 6, 15% scaling</li> <li>Shop: Appears after every level with 3 random options</li> </ul> <p>Made with \u2764\ufe0f by @tjsingleton </p>"},{"location":"testing/headless-simulation/","title":"Headless Simulation","text":""},{"location":"testing/integration-testing/","title":"Integration Testing","text":""},{"location":"testing/performance-testing/","title":"Performance Testing","text":""},{"location":"testing/screenshot-testing/","title":"Screenshot Testing","text":""},{"location":"testing/unit-testing/","title":"Unit Testing","text":"<p>BulletBuzz includes comprehensive unit tests covering all major game systems.</p>"},{"location":"testing/unit-testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n</code></pre>"},{"location":"testing/unit-testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized by system:</p> <ul> <li><code>BulletBuzzGame.test.ts</code>: Main game class tests</li> <li><code>core/Player.test.ts</code>: Player character tests</li> <li><code>core/Enemy.test.ts</code>: Enemy AI tests</li> <li><code>core/Axe.test.ts</code>: Combat system tests</li> <li><code>systems/CollisionSystem.test.ts</code>: Collision detection tests</li> <li><code>systems/LevelSystem.test.ts</code>: Level progression tests</li> <li><code>systems/SpawnSystem.test.ts</code>: Enemy spawning tests</li> </ul>"},{"location":"testing/unit-testing/#test-coverage","title":"Test Coverage","text":"<p>The test suite covers:</p> <ul> <li>\u2705 Game initialization and state management</li> <li>\u2705 Player movement and controls</li> <li>\u2705 Enemy AI and pathfinding</li> <li>\u2705 Combat mechanics and collision detection</li> <li>\u2705 Pickup collection and attraction</li> <li>\u2705 Level progression and shop system</li> <li>\u2705 Performance monitoring</li> <li>\u2705 Memory management</li> </ul>"},{"location":"testing/unit-testing/#example-test","title":"Example Test","text":"<pre><code>describe('Player', () =&gt; {\n  it('should move towards target position', () =&gt; {\n    const player = new Player(100, 100);\n    player.moveTowards(200, 200);\n\n    expect(player.x).toBeGreaterThan(100);\n    expect(player.y).toBeGreaterThan(100);\n  });\n});\n</code></pre>"}]}