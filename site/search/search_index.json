{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BulletBuzz","text":""},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>\ud83c\udfae Play BulletBuzz Game</p> <p>\ud83d\udcd6 View Documentation</p> <p>\ud83c\udfae Development Mode: Add <code>?speed=10</code> to the URL for 10x game speed!</p>"},{"location":"#what-is-bulletbuzz","title":"\ud83c\udfaf What is BulletBuzz?","text":"<p>BulletBuzz is a bullet heaven game inspired by Brotato and Vampire Survivors, where you survive waves of enemies in an endless arena. The game features:</p> <ul> <li>\ud83e\udde0 Advanced AI: Intelligent auto-pathing with wall avoidance and smart targeting</li> <li>\u2694\ufe0f Bullet Heaven: Survive waves of enemies in an endless arena</li> <li>\ud83c\udfa8 Modern UI: Professional shop modals and detailed game over screens</li> <li>\ud83e\uddea Testing: Comprehensive unit tests, integration tests, and automated screenshot testing with error detection</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>TypeScript: Type-safe game development</li> <li>HTML5 Canvas: Game rendering</li> <li>ES Modules: Modern JavaScript modules</li> <li>Node.js: Headless testing environment</li> <li>Jest: Unit testing framework</li> <li>Playwright: Automated browser testing and screenshots</li> <li>MkDocs: Professional documentation site</li> <li>TypeDoc: Auto-generated API documentation</li> <li>Mermaid: Architecture diagram rendering</li> </ul>"},{"location":"#core-systems","title":"Core Systems","text":"<ul> <li>Game Loop: Fixed timestep implementation for consistent updates</li> <li>AI System: Auto-pathing with wall avoidance and target tracking</li> <li>Combat System: Automatic axe throwing and collision detection</li> <li>Pickup System: XP and heart collection with attraction mechanics</li> <li>Level System: XP progression and shop management</li> <li>Spawn System: Dynamic enemy and pickup generation</li> </ul>"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Game Engine\"\n        Game[Game.ts&lt;br/&gt;Main Game Loop]\n        Player[Player.ts&lt;br/&gt;Player Entity]\n        Enemy[Enemy.ts&lt;br/&gt;Enemy Entities]\n        Axe[Axe.ts&lt;br/&gt;Weapon System]\n        HeartDrop[HeartDrop.ts&lt;br/&gt;Health Pickups]\n        XpDrop[XpDrop.ts&lt;br/&gt;XP Pickups]\n    end\n\n    subgraph \"Systems\"\n        CollisionSystem[CollisionSystem.ts&lt;br/&gt;Collision Detection]\n        LevelSystem[LevelSystem.ts&lt;br/&gt;Level Management]\n        SpawnSystem[SpawnSystem.ts&lt;br/&gt;Enemy Spawning]\n    end\n\n    subgraph \"UI &amp; Rendering\"\n        GameUI[game-ui.ts&lt;br/&gt;User Interface]\n        Canvas[HTML5 Canvas&lt;br/&gt;Rendering]\n    end\n\n    subgraph \"Types &amp; Interfaces\"\n        Types[types.ts&lt;br/&gt;Type Definitions]\n    end\n\n    %% Core relationships\n    Game --&gt; Player\n    Game --&gt; Enemy\n    Game --&gt; Axe\n    Game --&gt; HeartDrop\n    Game --&gt; XpDrop\n\n    %% System relationships\n    Game --&gt; CollisionSystem\n    Game --&gt; LevelSystem\n    Game --&gt; SpawnSystem\n\n    %% UI relationships\n    Game --&gt; GameUI\n    GameUI --&gt; Canvas\n\n    %% Type relationships\n    Game --&gt; Types\n    Player --&gt; Types\n    Enemy --&gt; Types\n    Axe --&gt; Types\n    HeartDrop --&gt; Types\n    XpDrop --&gt; Types\n    CollisionSystem --&gt; Types\n    LevelSystem --&gt; Types\n    SpawnSystem --&gt; Types\n\n    %% System interactions\n    CollisionSystem --&gt; Player\n    CollisionSystem --&gt; Enemy\n    CollisionSystem --&gt; Axe\n    CollisionSystem --&gt; HeartDrop\n    CollisionSystem --&gt; XpDrop\n\n    SpawnSystem --&gt; Enemy\n    LevelSystem --&gt; SpawnSystem\n\n    %% Styling\n    classDef coreClass fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef systemClass fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef uiClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n    classDef typeClass fill:#fff3e0,stroke:#e65100,stroke-width:2px\n\n    class Game,Player,Enemy,Axe,HeartDrop,XpDrop coreClass\n    class CollisionSystem,LevelSystem,SpawnSystem systemClass\n    class GameUI,Canvas uiClass\n    class Types typeClass</code></pre>"},{"location":"#game-features","title":"\ud83c\udfae Game Features","text":""},{"location":"#advanced-ai","title":"\ud83e\udde0 Advanced AI","text":"<ul> <li>Auto-Pathing: Intelligent movement with wall avoidance and target tracking</li> <li>Combat AI: Smart targeting within attack range with automatic axe throwing</li> <li>Pickup Attraction: XP orbs and hearts attract to player within pickup range</li> <li>Robot Vacuum Mode: Efficient pickup collection with pathfinding to drops</li> </ul>"},{"location":"#gameplay-mechanics","title":"\u2694\ufe0f Gameplay Mechanics","text":"<ul> <li>Bullet Heaven: Survive waves of enemies in an endless arena</li> <li>XP System: Level up to unlock new abilities with accurate progress tracking</li> <li>Pickup System: Collect hearts and XP drops with attraction mechanics</li> <li>Shop System: Choose upgrades between levels with auto-shop option</li> <li>Difficulty Scaling: Progressive challenge increase with dynamic spawn rates</li> </ul>"},{"location":"#enhanced-ui","title":"\ud83c\udfa8 Enhanced UI","text":"<ul> <li>Professional Shop Modal: Button-like options with sequential numbering</li> <li>Detailed Game Over Screen: Comprehensive statistics with skull emoji</li> <li>Real-time Stats: Live player and enemy statistics</li> <li>Range Visualization: Attack and pickup range circles</li> <li>XP Progress Bar: Visual progress tracking</li> </ul>"},{"location":"#game-balance","title":"\ud83d\udcca Game Balance","text":""},{"location":"#current-settings","title":"Current Settings","text":"<ul> <li>Player: 10 HP, 0.85 speed, 25 pickup range, 150 attack range</li> <li>Enemies: 0.15 speed, 8s spawn interval</li> <li>Auto-Pathing: 120 avoidance distance, 2.0 strength</li> <li>Difficulty: Single enemy until level 6, 15% scaling</li> <li>Shop: Appears after every level with 3 random options</li> </ul> <p>Made with \u2764\ufe0f by @tjsingleton </p>"},{"location":"features/event-system/","title":"Event System","text":""},{"location":"features/event-system/#overview","title":"\ud83c\udfaf Overview","text":"<p>The Event System provides a decoupled, event-driven architecture for BulletBuzz, allowing game components to communicate without direct dependencies. This improves code maintainability, testability, and enables powerful features like analytics, debugging, and modding.</p>"},{"location":"features/event-system/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"features/event-system/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    subgraph \"Event System\"\n        EventSystem[EventSystem&lt;br/&gt;Central Event Bus]\n        EventType[EventType&lt;br/&gt;Type-safe Events]\n        EventListener[EventListener&lt;br/&gt;Callback Management]\n    end\n\n    subgraph \"Game Components\"\n        Game[Game.ts&lt;br/&gt;Game Loop]\n        Player[Player.ts&lt;br/&gt;Player AI]\n        Enemy[Enemy.ts&lt;br/&gt;Enemy AI]\n        Systems[Systems&lt;br/&gt;Collision, Spawn, Level]\n    end\n\n    subgraph \"Event Flow\"\n        Emit[Event Emission]\n        Listen[Event Listening]\n        Process[Event Processing]\n    end\n\n    %% Component relationships\n    Game --&gt; Emit\n    Player --&gt; Emit\n    Enemy --&gt; Emit\n    Systems --&gt; Emit\n\n    Emit --&gt; EventSystem\n    EventSystem --&gt; Listen\n    Listen --&gt; Process\n    Process --&gt; Game\n    Process --&gt; Player\n    Process --&gt; Enemy\n    Process --&gt; Systems</code></pre>"},{"location":"features/event-system/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"features/event-system/#basic-usage","title":"Basic Usage","text":"<pre><code>import { EventSystem, EventType } from '../src/events/EventSystem';\n\n// Subscribe to events\nEventSystem.on(EventType.ENEMY_KILLED, (data) =&gt; {\n  console.log(`Enemy killed: ${data.enemyType}`);\n});\n\n// Emit events\nEventSystem.emit(EventType.ENEMY_KILLED, {\n  enemyType: 'bee',\n  x: 100,\n  y: 200,\n  level: 1,\n  xpValue: 10\n});\n</code></pre>"},{"location":"features/event-system/#one-time-listeners","title":"One-time Listeners","text":"<pre><code>// Listen for an event only once\nEventSystem.once(EventType.GAME_STARTED, () =&gt; {\n  console.log('Game started!');\n});\n</code></pre>"},{"location":"features/event-system/#event-types","title":"\ud83d\udccb Event Types","text":""},{"location":"features/event-system/#combat-events","title":"Combat Events","text":"Event Description Data Structure <code>ENEMY_KILLED</code> Enemy defeated by player <code>EnemyKilledEvent</code> <code>PLAYER_DAMAGED</code> Player takes damage <code>PlayerDamagedEvent</code> <code>AXE_THROWN</code> Player throws an axe <code>{ x: number, y: number }</code> <code>AXE_HIT</code> Axe hits an enemy <code>{ enemyType: string, damage: number }</code>"},{"location":"features/event-system/#pickup-events","title":"Pickup Events","text":"Event Description Data Structure <code>XP_COLLECTED</code> Player collects XP <code>XpCollectedEvent</code> <code>HEART_COLLECTED</code> Player collects health <code>{ amount: number }</code> <code>PICKUP_SPAWNED</code> Pickup item spawned <code>{ type: string, x: number, y: number }</code>"},{"location":"features/event-system/#level-events","title":"Level Events","text":"Event Description Data Structure <code>LEVEL_UP</code> Player gains a level <code>LevelUpEvent</code> <code>SHOP_OPENED</code> Shop modal appears <code>{ upgrades: string[] }</code> <code>SHOP_CLOSED</code> Shop modal closes <code>{ selectedUpgrade?: string }</code> <code>UPGRADE_SELECTED</code> Player selects upgrade <code>{ upgrade: string }</code>"},{"location":"features/event-system/#game-state-events","title":"Game State Events","text":"Event Description Data Structure <code>GAME_STARTED</code> Game begins <code>undefined</code> <code>GAME_OVER</code> Game ends <code>GameOverEvent</code> <code>GAME_PAUSED</code> Game paused <code>undefined</code> <code>GAME_RESUMED</code> Game resumed <code>undefined</code>"},{"location":"features/event-system/#performance-events","title":"Performance Events","text":"Event Description Data Structure <code>PERFORMANCE_WARNING</code> Performance issues detected <code>{ fps: number, memory: number }</code> <code>MEMORY_WARNING</code> Memory usage high <code>{ usage: number, limit: number }</code>"},{"location":"features/event-system/#spawn-events","title":"Spawn Events","text":"Event Description Data Structure <code>ENEMY_SPAWNED</code> New enemy appears <code>{ type: string, x: number, y: number }</code> <code>WAVE_STARTED</code> New wave begins <code>{ waveNumber: number }</code> <code>WAVE_COMPLETED</code> Wave finished <code>{ waveNumber: number, enemiesKilled: number }</code>"},{"location":"features/event-system/#api-reference","title":"\ud83d\udd27 API Reference","text":""},{"location":"features/event-system/#eventsystem-class","title":"EventSystem Class","text":""},{"location":"features/event-system/#eventsystemoneventtype-callback-once","title":"<code>EventSystem.on(eventType, callback, once?)</code>","text":"<p>Subscribe to an event.</p> <p>Parameters: - <code>eventType: EventType</code> - The event type to listen for - <code>callback: (data?: any) =&gt; void</code> - Function to call when event occurs - <code>once?: boolean</code> - If true, listener is removed after first call</p> <p>Returns: <code>string</code> - Listener ID for unsubscribing</p> <p>Example: <pre><code>const listenerId = EventSystem.on(EventType.ENEMY_KILLED, (data) =&gt; {\n  console.log(`Enemy killed at ${data.x}, ${data.y}`);\n});\n</code></pre></p>"},{"location":"features/event-system/#eventsystemonceeventtype-callback","title":"<code>EventSystem.once(eventType, callback)</code>","text":"<p>Subscribe to an event once (auto-removes after first call).</p> <p>Parameters: - <code>eventType: EventType</code> - The event type to listen for - <code>callback: (data?: any) =&gt; void</code> - Function to call when event occurs</p> <p>Returns: <code>string</code> - Listener ID for unsubscribing</p> <p>Example: <pre><code>EventSystem.once(EventType.GAME_STARTED, () =&gt; {\n  console.log('Game started!');\n});\n</code></pre></p>"},{"location":"features/event-system/#eventsystememiteventtype-data","title":"<code>EventSystem.emit(eventType, data?)</code>","text":"<p>Emit an event to all listeners.</p> <p>Parameters: - <code>eventType: EventType</code> - The event type to emit - <code>data?: any</code> - Optional data to pass to listeners</p> <p>Example: <pre><code>EventSystem.emit(EventType.ENEMY_KILLED, {\n  enemyType: 'bee',\n  x: 100,\n  y: 200,\n  level: 1,\n  xpValue: 10\n});\n</code></pre></p>"},{"location":"features/event-system/#eventsystemoffeventtype-listenerid","title":"<code>EventSystem.off(eventType, listenerId)</code>","text":"<p>Unsubscribe from an event.</p> <p>Parameters: - <code>eventType: EventType</code> - The event type - <code>listenerId: string</code> - The listener ID returned from <code>on()</code> or <code>once()</code></p> <p>Returns: <code>boolean</code> - True if listener was removed</p> <p>Example: <pre><code>const listenerId = EventSystem.on(EventType.ENEMY_KILLED, callback);\nEventSystem.off(EventType.ENEMY_KILLED, listenerId);\n</code></pre></p>"},{"location":"features/event-system/#eventsystemcleareventtype","title":"<code>EventSystem.clear(eventType)</code>","text":"<p>Remove all listeners for an event type.</p> <p>Parameters: - <code>eventType: EventType</code> - The event type to clear</p> <p>Example: <pre><code>EventSystem.clear(EventType.ENEMY_KILLED);\n</code></pre></p>"},{"location":"features/event-system/#eventsystemclearall","title":"<code>EventSystem.clearAll()</code>","text":"<p>Remove all event listeners.</p> <p>Example: <pre><code>EventSystem.clearAll();\n</code></pre></p>"},{"location":"features/event-system/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"features/event-system/#eventsystemgetlistenercounteventtype","title":"<code>EventSystem.getListenerCount(eventType)</code>","text":"<p>Get the number of listeners for an event type.</p> <p>Parameters: - <code>eventType: EventType</code> - The event type to check</p> <p>Returns: <code>number</code> - Number of active listeners</p>"},{"location":"features/event-system/#eventsystemgetactiveeventtypes","title":"<code>EventSystem.getActiveEventTypes()</code>","text":"<p>Get all active event types.</p> <p>Returns: <code>EventType[]</code> - Array of event types with active listeners</p>"},{"location":"features/event-system/#eventsystemsetdebugmodeenabled","title":"<code>EventSystem.setDebugMode(enabled)</code>","text":"<p>Enable debug mode for detailed logging.</p> <p>Parameters: - <code>enabled: boolean</code> - Whether to enable debug mode</p>"},{"location":"features/event-system/#eventsystemgetstats","title":"<code>EventSystem.getStats()</code>","text":"<p>Get system statistics.</p> <p>Returns: <code>{ totalListeners: number, activeEventTypes: number, eventTypes: EventType[] }</code></p>"},{"location":"features/event-system/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"features/event-system/#unit-tests","title":"Unit Tests","text":"<p>The Event System includes comprehensive unit tests covering: - Event registration and unregistration - Event emission and listener execution - One-time listeners - Error handling - Performance monitoring - Debug mode functionality</p>"},{"location":"features/event-system/#test-coverage","title":"Test Coverage","text":"<ul> <li>Statements: 100%</li> <li>Branches: 100%</li> <li>Functions: 100%</li> <li>Lines: 100%</li> </ul>"},{"location":"features/event-system/#running-tests","title":"Running Tests","text":"<pre><code># Run Event System tests\nnpm test -- --testPathPattern=EventSystem\n\n# Run with coverage\nnpm run test:coverage -- --testPathPattern=EventSystem\n</code></pre>"},{"location":"features/event-system/#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"features/event-system/#1-analytics-and-tracking","title":"1. Analytics and Tracking","text":"<pre><code>// Track player performance\nEventSystem.on(EventType.ENEMY_KILLED, (data) =&gt; {\n  analytics.track('enemy_killed', {\n    enemyType: data.enemyType,\n    level: data.level,\n    xpValue: data.xpValue\n  });\n});\n\nEventSystem.on(EventType.GAME_OVER, (data) =&gt; {\n  analytics.track('game_over', {\n    finalLevel: data.finalLevel,\n    timeSurvived: data.timeSurvived,\n    enemiesKilled: data.enemiesKilled\n  });\n});\n</code></pre>"},{"location":"features/event-system/#2-debugging-and-development","title":"2. Debugging and Development","text":"<pre><code>// Enable debug mode in development\nif (process.env.NODE_ENV === 'development') {\n  EventSystem.setDebugMode(true);\n}\n\n// Monitor event flow\nEventSystem.on(EventType.LEVEL_UP, (data) =&gt; {\n  console.log(`Level up! New level: ${data.newLevel}`);\n});\n</code></pre>"},{"location":"features/event-system/#3-ui-updates","title":"3. UI Updates","text":"<pre><code>// Update UI when events occur\nEventSystem.on(EventType.XP_COLLECTED, (data) =&gt; {\n  updateXpBar(data.totalXp, data.level);\n});\n\nEventSystem.on(EventType.HEART_COLLECTED, (data) =&gt; {\n  updateHealthBar(data.amount);\n});\n</code></pre>"},{"location":"features/event-system/#4-game-logic","title":"4. Game Logic","text":"<pre><code>// Trigger game mechanics\nEventSystem.on(EventType.ENEMY_KILLED, (data) =&gt; {\n  // Spawn XP drop\n  spawnXpDrop(data.x, data.y, data.xpValue);\n\n  // Check for level up\n  checkLevelUp();\n});\n</code></pre>"},{"location":"features/event-system/#migration-guide","title":"\ud83d\udd04 Migration Guide","text":""},{"location":"features/event-system/#from-direct-method-calls","title":"From Direct Method Calls","text":"<p>Before (Tight Coupling): <pre><code>class Game {\n  private player: Player;\n  private ui: UI;\n\n  onEnemyKilled(enemy: Enemy) {\n    this.player.addXp(enemy.xpValue);\n    this.ui.updateXpBar();\n    this.checkLevelUp();\n  }\n}\n</code></pre></p> <p>After (Event-Driven): <pre><code>class Game {\n  constructor() {\n    EventSystem.on(EventType.ENEMY_KILLED, (data) =&gt; {\n      this.player.addXp(data.xpValue);\n    });\n  }\n}\n\nclass UI {\n  constructor() {\n    EventSystem.on(EventType.XP_COLLECTED, (data) =&gt; {\n      this.updateXpBar(data.totalXp);\n    });\n  }\n}\n</code></pre></p>"},{"location":"features/event-system/#performance-considerations","title":"\ud83d\ude80 Performance Considerations","text":""},{"location":"features/event-system/#memory-management","title":"Memory Management","text":"<ul> <li>One-time listeners are automatically cleaned up</li> <li>Use <code>clear()</code> and <code>clearAll()</code> to prevent memory leaks</li> <li>Monitor listener counts with <code>getStats()</code></li> </ul>"},{"location":"features/event-system/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Monitor event system performance\nsetInterval(() =&gt; {\n  const stats = EventSystem.getStats();\n  if (stats.totalListeners &gt; 100) {\n    console.warn('High number of event listeners:', stats.totalListeners);\n  }\n}, 5000);\n</code></pre>"},{"location":"features/event-system/#best-practices","title":"Best Practices","text":"<ol> <li>Unsubscribe when done: Always clean up listeners</li> <li>Use one-time listeners: For events that should only fire once</li> <li>Monitor performance: Track listener counts and event frequency</li> <li>Error handling: Wrap event callbacks in try-catch blocks</li> <li>Type safety: Use TypeScript interfaces for event data</li> </ol>"},{"location":"features/event-system/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":""},{"location":"features/event-system/#planned-features","title":"Planned Features","text":"<ul> <li>Event History: Track recent events for debugging</li> <li>Event Filtering: Subscribe to events with conditions</li> <li>Event Batching: Batch multiple events for performance</li> <li>Remote Events: Network event synchronization for multiplayer</li> <li>Event Persistence: Save/load event state for save games</li> </ul>"},{"location":"features/event-system/#integration-points","title":"Integration Points","text":"<ul> <li>Analytics System: Automatic event tracking</li> <li>Debug Console: Real-time event monitoring</li> <li>Modding API: Allow mods to listen to and emit events</li> <li>Replay System: Record and replay event sequences</li> </ul> <p>The Event System provides a solid foundation for building complex, maintainable game systems while enabling powerful debugging and analytics capabilities. </p>"},{"location":"testing/headless-simulation/","title":"Headless Simulation","text":""},{"location":"testing/integration-testing/","title":"Integration Testing","text":"<p>BulletBuzz includes comprehensive integration testing to ensure all systems work together correctly.</p>"},{"location":"testing/integration-testing/#test-categories","title":"\ud83e\uddea Test Categories","text":""},{"location":"testing/integration-testing/#deployment-integration-tests","title":"Deployment Integration Tests","text":"<ul> <li>GitHub Pages Deployment: Verifies game and docs are accessible</li> <li>Documentation Integration: Tests links between game and docs</li> <li>Logo Integration: Verifies logo displays correctly across all pages</li> <li>Mermaid Diagram Integration: Tests architecture diagram rendering</li> </ul>"},{"location":"testing/integration-testing/#game-integration-tests","title":"Game Integration Tests","text":"<ul> <li>End-to-End Game Flow: Complete game session testing</li> <li>UI Integration: Shop, game over, and HUD functionality</li> <li>System Integration: Collision, spawning, and level progression</li> <li>Performance Integration: Memory and performance monitoring</li> </ul>"},{"location":"testing/integration-testing/#running-integration-tests","title":"\ud83d\ude80 Running Integration Tests","text":"<pre><code># Run all integration tests\nnpm run test:all\n\n# Run specific integration tests\nnpm run test:github-pages      # Deployment testing\nnpm run test:documentation     # Documentation testing\nnpm run test:game-content      # Game functionality testing\nnpm run test:readme-docs       # README link testing\nnpm run test:game-doc-link     # Game-to-docs link testing\nnpm run test:docs-logo-size    # Logo integration testing\nnpm run test:mermaid-diagram   # Diagram rendering testing\n</code></pre>"},{"location":"testing/integration-testing/#test-coverage","title":"\ud83d\udcca Test Coverage","text":""},{"location":"testing/integration-testing/#deployment-integration","title":"Deployment Integration","text":"<ul> <li>\u2705 Game loads correctly on GitHub Pages</li> <li>\u2705 Documentation site is accessible</li> <li>\u2705 All assets (JS, CSS, images) load properly</li> <li>\u2705 Navigation links work correctly</li> <li>\u2705 Logo displays with correct size</li> <li>\u2705 Mermaid diagrams render properly</li> </ul>"},{"location":"testing/integration-testing/#game-system-integration","title":"Game System Integration","text":"<ul> <li>\u2705 Player movement and AI integration</li> <li>\u2705 Enemy spawning and AI integration</li> <li>\u2705 Combat system integration</li> <li>\u2705 Pickup system integration</li> <li>\u2705 Level progression integration</li> <li>\u2705 Shop system integration</li> </ul>"},{"location":"testing/integration-testing/#ui-integration","title":"UI Integration","text":"<ul> <li>\u2705 Game canvas rendering</li> <li>\u2705 Shop modal functionality</li> <li>\u2705 Game over screen display</li> <li>\u2705 HUD elements (health, XP, level)</li> <li>\u2705 Range visualization</li> <li>\u2705 Performance metrics display</li> </ul>"},{"location":"testing/integration-testing/#test-implementation","title":"\ud83d\udd27 Test Implementation","text":""},{"location":"testing/integration-testing/#playwright-integration-testing","title":"Playwright Integration Testing","text":"<pre><code>// advanced-screenshots.js\nclass ScreenshotTaker {\n  async testGameContent() {\n    // Load game page\n    await this.page.goto('https://tjsingleton.github.io/bulletbuzz/game/');\n\n    // Wait for game to load\n    await this.page.waitForSelector('#gameCanvas');\n\n    // Verify game is running\n    const canvas = await this.page.locator('#gameCanvas');\n    const isVisible = await canvas.isVisible();\n\n    // Check for game elements\n    const hasPlayer = await this.page.locator('.player').count() &gt; 0;\n    const hasEnemies = await this.page.locator('.enemy').count() &gt; 0;\n\n    return isVisible &amp;&amp; hasPlayer &amp;&amp; hasEnemies;\n  }\n}\n</code></pre>"},{"location":"testing/integration-testing/#error-detection-integration","title":"Error Detection Integration","text":"<pre><code>// Monitor all types of errors\npage.on('console', msg =&gt; {\n  if (msg.type() === 'error') {\n    console.log(`\u274c Console Error: ${msg.text()}`);\n  }\n});\n\npage.on('response', response =&gt; {\n  if (!response.ok()) {\n    console.log(`\u274c Network Error: ${response.url()} - ${response.status()}`);\n  }\n});\n\npage.on('pageerror', error =&gt; {\n  console.log(`\u274c Page Error: ${error.message}`);\n});\n</code></pre>"},{"location":"testing/integration-testing/#test-scenarios","title":"\ud83d\udccb Test Scenarios","text":""},{"location":"testing/integration-testing/#1-complete-game-session","title":"1. Complete Game Session","text":"<pre><code>async testCompleteGameSession() {\n  // Start game\n  await this.page.goto('https://tjsingleton.github.io/bulletbuzz/game/');\n  await this.page.waitForSelector('#gameCanvas');\n\n  // Wait for game to run\n  await this.page.waitForTimeout(5000);\n\n  // Check game state\n  const gameState = await this.page.evaluate(() =&gt; {\n    return window.game?.getGameState();\n  });\n\n  // Verify game is running\n  expect(gameState.isRunning).toBe(true);\n  expect(gameState.player.health).toBeGreaterThan(0);\n}\n</code></pre>"},{"location":"testing/integration-testing/#2-documentation-integration","title":"2. Documentation Integration","text":"<pre><code>async testDocumentationIntegration() {\n  // Test game-to-docs link\n  await this.page.goto('https://tjsingleton.github.io/bulletbuzz/game/');\n  const docLink = await this.page.locator('a[href=\"../\"]');\n  await docLink.click();\n\n  // Verify we're on docs page\n  const currentUrl = this.page.url();\n  expect(currentUrl).toContain('tjsingleton.github.io/bulletbuzz');\n  expect(currentUrl).not.toContain('/game/');\n}\n</code></pre>"},{"location":"testing/integration-testing/#3-logo-integration-test","title":"3. Logo Integration Test","text":"<pre><code>async testLogoIntegration() {\n  // Test logo on docs page\n  await this.page.goto('https://tjsingleton.github.io/bulletbuzz/');\n  const logo = await this.page.locator('img[alt*=\"BulletBuzz Logo\"]');\n\n  // Verify logo size\n  const logoWidth = await logo.evaluate(el =&gt; el.getBoundingClientRect().width);\n  expect(logoWidth).toBeGreaterThan(80);\n  expect(logoWidth).toBeLessThan(120);\n}\n</code></pre>"},{"location":"testing/integration-testing/#common-integration-issues","title":"\ud83d\udc1b Common Integration Issues","text":""},{"location":"testing/integration-testing/#deployment-issues","title":"Deployment Issues","text":"<ol> <li>404 Errors: Game files not deployed to GitHub Pages</li> <li>Asset Loading: CSS/JS files not loading correctly</li> <li>Path Issues: Incorrect relative paths in deployed files</li> </ol>"},{"location":"testing/integration-testing/#game-integration-issues","title":"Game Integration Issues","text":"<ol> <li>Canvas Not Loading: Game not initializing properly</li> <li>AI Not Working: Player or enemy AI not functioning</li> <li>Systems Not Connected: Collision or spawning not working</li> </ol>"},{"location":"testing/integration-testing/#documentation-issues","title":"Documentation Issues","text":"<ol> <li>Links Broken: Navigation links not working</li> <li>Logo Not Displaying: Image paths incorrect</li> <li>Mermaid Not Rendering: JavaScript not loading</li> </ol>"},{"location":"testing/integration-testing/#test-results","title":"\ud83d\udcc8 Test Results","text":""},{"location":"testing/integration-testing/#success-criteria","title":"Success Criteria","text":"<ul> <li>\u2705 All pages load without errors</li> <li>\u2705 Game runs smoothly</li> <li>\u2705 Documentation is accessible</li> <li>\u2705 All links work correctly</li> <li>\u2705 Assets load properly</li> <li>\u2705 No console or network errors</li> </ul>"},{"location":"testing/integration-testing/#failure-indicators","title":"Failure Indicators","text":"<ul> <li>\u274c 404 errors for game files</li> <li>\u274c Console errors in browser</li> <li>\u274c Game not loading or running</li> <li>\u274c Broken navigation links</li> <li>\u274c Missing or incorrect assets</li> </ul>"},{"location":"testing/integration-testing/#continuous-integration","title":"\ud83d\udd04 Continuous Integration","text":"<p>Integration tests run: - On every deployment - Before merging pull requests - During development for quick feedback - As part of the CI/CD pipeline</p> <p>The integration testing ensures all systems work together correctly and provides immediate feedback on any issues.</p>"},{"location":"testing/performance-testing/","title":"Performance Testing","text":""},{"location":"testing/screenshot-testing/","title":"Screenshot Testing","text":"<p>BulletBuzz uses Playwright for comprehensive automated screenshot testing and error detection.</p>"},{"location":"testing/screenshot-testing/#test-types","title":"\ud83e\uddea Test Types","text":""},{"location":"testing/screenshot-testing/#core-tests","title":"Core Tests","text":"<ul> <li><code>test:github-pages</code>: Tests game deployment on GitHub Pages</li> <li><code>test:documentation</code>: Tests documentation site functionality</li> <li><code>test:game-content</code>: Tests game content and functionality</li> <li><code>test:readme-docs</code>: Tests README documentation link</li> <li><code>test:game-doc-link</code>: Tests game's documentation link</li> <li><code>test:docs-logo-size</code>: Tests logo size on documentation</li> <li><code>test:mermaid-diagram</code>: Tests Mermaid diagram rendering</li> </ul>"},{"location":"testing/screenshot-testing/#error-detection","title":"Error Detection","text":"<p>The testing system automatically detects and reports: - Console Errors: JavaScript errors and warnings - Network Errors: Failed HTTP requests (404s, timeouts) - Page Errors: Unhandled exceptions and DOM errors - Response Errors: API failures and server errors</p>"},{"location":"testing/screenshot-testing/#running-tests","title":"\ud83d\ude80 Running Tests","text":"<pre><code># Run all tests\nnpm run test:all\n\n# Run specific test\nnpm run test:github-pages\nnpm run test:documentation\nnpm run test:game-content\nnpm run test:readme-docs\nnpm run test:game-doc-link\nnpm run test:docs-logo-size\nnpm run test:mermaid-diagram\n\n# Run deployment tests\nnpm run test:all\n</code></pre>"},{"location":"testing/screenshot-testing/#test-features","title":"\ud83d\udcca Test Features","text":""},{"location":"testing/screenshot-testing/#content-assertions","title":"Content Assertions","text":"<p>Tests verify expected content before taking screenshots: - Logo presence and size - Navigation elements - Game canvas loading - Documentation links - Mermaid diagram rendering</p>"},{"location":"testing/screenshot-testing/#error-monitoring","title":"Error Monitoring","text":"<p>Real-time detection of: - Console errors and warnings - Network request failures - Page load timeouts - JavaScript exceptions</p>"},{"location":"testing/screenshot-testing/#screenshot-management","title":"Screenshot Management","text":"<ul> <li>Automatic cleanup of temporary files</li> <li>Timestamped screenshots for debugging</li> <li>Organized storage in <code>.tmp/screenshots/</code></li> </ul>"},{"location":"testing/screenshot-testing/#test-configuration","title":"\ud83d\udd27 Test Configuration","text":""},{"location":"testing/screenshot-testing/#playwright-setup","title":"Playwright Setup","text":"<pre><code>// advanced-screenshots.js\nclass ScreenshotTaker {\n  async init() {\n    this.browser = await chromium.launch({ headless: true });\n    this.page = await this.browser.newPage();\n  }\n\n  async takeScreenshot(name) {\n    await this.page.screenshot({ \n      path: `.tmp/screenshots/${name}-${timestamp}.png` \n    });\n  }\n}\n</code></pre>"},{"location":"testing/screenshot-testing/#error-detection_1","title":"Error Detection","text":"<pre><code>// Monitor console errors\npage.on('console', msg =&gt; {\n  if (msg.type() === 'error') {\n    console.log(`\u274c Console Error: ${msg.text()}`);\n  }\n});\n\n// Monitor network errors\npage.on('response', response =&gt; {\n  if (!response.ok()) {\n    console.log(`\u274c Response Error: ${response.url()} - ${response.status()}`);\n  }\n});\n</code></pre>"},{"location":"testing/screenshot-testing/#test-examples","title":"\ud83d\udccb Test Examples","text":""},{"location":"testing/screenshot-testing/#logo-size-test","title":"Logo Size Test","text":"<pre><code>async testDocumentationLogoSize() {\n  // Load documentation page\n  await this.page.goto('https://tjsingleton.github.io/bulletbuzz/');\n\n  // Find logo and check size\n  const logo = await this.page.locator('img[alt*=\"BulletBuzz Logo\"]');\n  const logoWidth = await logo.evaluate(el =&gt; el.getBoundingClientRect().width);\n\n  // Verify expected size (100px)\n  if (logoWidth &lt;= 120 &amp;&amp; logoWidth &gt;= 80) {\n    console.log('\u2705 Logo size is correct');\n  }\n}\n</code></pre>"},{"location":"testing/screenshot-testing/#mermaid-diagram-test","title":"Mermaid Diagram Test","text":"<pre><code>async testMermaidDiagram() {\n  // Find Mermaid diagrams\n  const mermaidElements = await this.page.locator('.mermaid').count();\n\n  // Check for SVG rendering\n  const hasSvg = await element.evaluate(el =&gt; \n    el.querySelector('svg') !== null\n  );\n\n  if (hasSvg) {\n    console.log('\u2705 Mermaid diagram is properly rendered');\n  }\n}\n</code></pre>"},{"location":"testing/screenshot-testing/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"testing/screenshot-testing/#common-issues","title":"Common Issues","text":"<ol> <li>404 Errors: Game files not deployed properly</li> <li>Timeout Errors: Page taking too long to load</li> <li>Logo Size Issues: CSS not applying correctly</li> <li>Mermaid Not Rendering: JavaScript not loading</li> </ol>"},{"location":"testing/screenshot-testing/#debug-commands","title":"Debug Commands","text":"<pre><code># Check deployment status\ncurl -I https://tjsingleton.github.io/bulletbuzz/\n\n# View screenshots\nopen .tmp/screenshots/\n\n# Run specific test with verbose output\nDEBUG=pw:api npm run test:docs-logo-size\n</code></pre>"},{"location":"testing/screenshot-testing/#test-results","title":"\ud83d\udcc8 Test Results","text":""},{"location":"testing/screenshot-testing/#success-indicators","title":"Success Indicators","text":"<ul> <li>\u2705 All tests pass without errors</li> <li>\u2705 Screenshots captured successfully</li> <li>\u2705 Content assertions pass</li> <li>\u2705 No console or network errors</li> </ul>"},{"location":"testing/screenshot-testing/#failure-indicators","title":"Failure Indicators","text":"<ul> <li>\u274c Timeout errors</li> <li>\u274c 404 errors for game files</li> <li>\u274c Console errors in browser</li> <li>\u274c Content assertions fail</li> </ul>"},{"location":"testing/screenshot-testing/#continuous-integration","title":"\ud83d\udd04 Continuous Integration","text":"<p>Tests are automatically run: - On every deployment - Before merging pull requests - During development for quick feedback</p> <p>The testing system provides immediate feedback on deployment issues and ensures the game and documentation are always functional.</p>"},{"location":"testing/test-coverage-report/","title":"Test Coverage Report","text":""},{"location":"testing/test-coverage-report/#overall-coverage-summary","title":"\ud83d\udcca Overall Coverage Summary","text":"<p>Last Updated: July 30, 2025 Test Framework: Jest Total Tests: 28 Test Suites: 1 Coverage Target: 90%+</p>"},{"location":"testing/test-coverage-report/#coverage-metrics","title":"\ud83c\udfaf Coverage Metrics","text":"Metric Overall Target Status Statements 51.19% 90% \u26a0\ufe0f Needs Improvement Branches 42.91% 90% \u26a0\ufe0f Needs Improvement Functions 60.65% 90% \u26a0\ufe0f Needs Improvement Lines 51.56% 90% \u26a0\ufe0f Needs Improvement"},{"location":"testing/test-coverage-report/#file-by-file-coverage","title":"\ud83d\udcc1 File-by-File Coverage","text":""},{"location":"testing/test-coverage-report/#core-game-files","title":"\ud83c\udfae Core Game Files","text":""},{"location":"testing/test-coverage-report/#srcbulletbuzzgamets-196-lines","title":"<code>src/BulletBuzzGame.ts</code> (196 lines)","text":"<ul> <li>Statements: 44.64% \u26a0\ufe0f</li> <li>Branches: 25% \u26a0\ufe0f</li> <li>Functions: 48.27% \u26a0\ufe0f</li> <li>Lines: 44.44% \u26a0\ufe0f</li> <li>Uncovered Lines: 84-91, 103-125, 134-135, 160-194</li> <li>Status: \ud83d\udfe1 Needs Testing</li> </ul>"},{"location":"testing/test-coverage-report/#srcgame-uits-741-lines","title":"<code>src/game-ui.ts</code> (741 lines)","text":"<ul> <li>Statements: 0% \u274c</li> <li>Branches: 0% \u274c</li> <li>Functions: 0% \u274c</li> <li>Lines: 0% \u274c</li> <li>Status: \ud83d\udd34 No Tests</li> </ul>"},{"location":"testing/test-coverage-report/#core-systems-excellent-coverage","title":"\ud83c\udfd7\ufe0f Core Systems (Excellent Coverage)","text":""},{"location":"testing/test-coverage-report/#srccoregamets-304-lines","title":"<code>src/core/Game.ts</code> (304 lines)","text":"<ul> <li>Statements: 94.35% \u2705</li> <li>Branches: 79.54% \u26a0\ufe0f</li> <li>Functions: 100% \u2705</li> <li>Lines: 94.11% \u2705</li> <li>Uncovered Lines: 165-166, 200, 208, 211, 214, 217</li> <li>Status: \ud83d\udfe2 Well Tested</li> </ul>"},{"location":"testing/test-coverage-report/#srccoreplayerts-194-lines","title":"<code>src/core/Player.ts</code> (194 lines)","text":"<ul> <li>Statements: 100% \u2705</li> <li>Branches: 96.55% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 100% \u2705</li> <li>Uncovered Lines: 31</li> <li>Status: \ud83d\udfe2 Excellent Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srccoreenemyts-100-lines","title":"<code>src/core/Enemy.ts</code> (100 lines)","text":"<ul> <li>Statements: 100% \u2705</li> <li>Branches: 100% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 100% \u2705</li> <li>Status: \ud83d\udfe2 Perfect Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srccoreaxets-75-lines","title":"<code>src/core/Axe.ts</code> (75 lines)","text":"<ul> <li>Statements: 88% \u2705</li> <li>Branches: 85.71% \u2705</li> <li>Functions: 75% \u26a0\ufe0f</li> <li>Lines: 88% \u2705</li> <li>Uncovered Lines: 40-41, 73</li> <li>Status: \ud83d\udfe1 Good Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srccoreheartdropts-72-lines","title":"<code>src/core/HeartDrop.ts</code> (72 lines)","text":"<ul> <li>Statements: 96.15% \u2705</li> <li>Branches: 100% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 96.15% \u2705</li> <li>Uncovered Lines: 70</li> <li>Status: \ud83d\udfe2 Excellent Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srccorexpdropts-72-lines","title":"<code>src/core/XpDrop.ts</code> (72 lines)","text":"<ul> <li>Statements: 96.15% \u2705</li> <li>Branches: 87.5% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 96.15% \u2705</li> <li>Uncovered Lines: 70</li> <li>Status: \ud83d\udfe2 Excellent Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#systems-excellent-coverage","title":"\ud83d\udd27 Systems (Excellent Coverage)","text":""},{"location":"testing/test-coverage-report/#srcsystemscollisionsystemts-131-lines","title":"<code>src/systems/CollisionSystem.ts</code> (131 lines)","text":"<ul> <li>Statements: 100% \u2705</li> <li>Branches: 100% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 100% \u2705</li> <li>Status: \ud83d\udfe2 Perfect Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srcsystemslevelsystemts-157-lines","title":"<code>src/systems/LevelSystem.ts</code> (157 lines)","text":"<ul> <li>Statements: 96.15% \u2705</li> <li>Branches: 100% \u2705</li> <li>Functions: 80% \u26a0\ufe0f</li> <li>Lines: 96% \u2705</li> <li>Uncovered Lines: 135-146</li> <li>Status: \ud83d\udfe1 Good Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#srcsystemsspawnsystemts-97-lines","title":"<code>src/systems/SpawnSystem.ts</code> (97 lines)","text":"<ul> <li>Statements: 100% \u2705</li> <li>Branches: 85.71% \u2705</li> <li>Functions: 100% \u2705</li> <li>Lines: 100% \u2705</li> <li>Uncovered Lines: 76</li> <li>Status: \ud83d\udfe2 Excellent Coverage</li> </ul>"},{"location":"testing/test-coverage-report/#test-categories","title":"\ud83e\uddea Test Categories","text":""},{"location":"testing/test-coverage-report/#well-tested-areas","title":"\u2705 Well Tested Areas","text":"<ul> <li>Core Game Logic: Game.ts, Player.ts, Enemy.ts</li> <li>Systems: CollisionSystem, SpawnSystem</li> <li>Pickup System: HeartDrop.ts, XpDrop.ts</li> <li>Combat: Axe.ts (mostly covered)</li> </ul>"},{"location":"testing/test-coverage-report/#areas-needing-improvement","title":"\u26a0\ufe0f Areas Needing Improvement","text":"<ul> <li>Game API: BulletBuzzGame.ts (44% coverage)</li> <li>UI Layer: game-ui.ts (0% coverage)</li> <li>Level System: LevelSystem.ts (80% functions)</li> </ul>"},{"location":"testing/test-coverage-report/#untested-areas","title":"\u274c Untested Areas","text":"<ul> <li>UI Rendering: game-ui.ts (741 lines, 0% coverage)</li> <li>Type Definitions: types.ts (not measured)</li> </ul>"},{"location":"testing/test-coverage-report/#test-coverage-by-feature","title":"\ud83d\udccb Test Coverage by Feature","text":""},{"location":"testing/test-coverage-report/#game-features","title":"\ud83c\udfae Game Features","text":"Feature Coverage Status Game Initialization 44% \u26a0\ufe0f Needs Testing Game Loop 94% \u2705 Well Tested Player AI 100% \u2705 Perfect Enemy AI 100% \u2705 Perfect Combat System 88% \u2705 Good Pickup System 96% \u2705 Excellent Level Progression 96% \u2705 Excellent Shop System 44% \u26a0\ufe0f Needs Testing UI Rendering 0% \u274c No Tests"},{"location":"testing/test-coverage-report/#systems","title":"\ud83d\udd27 Systems","text":"System Coverage Status Collision Detection 100% \u2705 Perfect Enemy Spawning 100% \u2705 Perfect Level Management 96% \u2705 Excellent"},{"location":"testing/test-coverage-report/#priority-areas-for-improvement","title":"\ud83c\udfaf Priority Areas for Improvement","text":""},{"location":"testing/test-coverage-report/#critical-0-coverage","title":"\ud83d\udd34 Critical (0% Coverage)","text":"<ol> <li><code>game-ui.ts</code> (741 lines)</li> <li>UI rendering and controls</li> <li>Canvas drawing functions</li> <li>Event handlers</li> <li>Modal management</li> </ol>"},{"location":"testing/test-coverage-report/#high-priority-low-coverage","title":"\ud83d\udfe1 High Priority (Low Coverage)","text":"<ol> <li><code>BulletBuzzGame.ts</code> (44% coverage)</li> <li>Game API methods</li> <li>Configuration handling</li> <li>Error handling paths</li> <li> <p>Advanced features</p> </li> <li> <p><code>LevelSystem.ts</code> (80% functions)</p> </li> <li>Shop system functions</li> <li>Advanced level logic</li> <li>Error handling</li> </ol>"},{"location":"testing/test-coverage-report/#good-coverage-maintain","title":"\ud83d\udfe2 Good Coverage (Maintain)","text":"<ul> <li>All core game systems</li> <li>Player and enemy AI</li> <li>Pickup mechanics</li> <li>Collision detection</li> </ul>"},{"location":"testing/test-coverage-report/#recommended-actions","title":"\ud83d\ude80 Recommended Actions","text":""},{"location":"testing/test-coverage-report/#1-immediate-next-sprint","title":"1. Immediate (Next Sprint)","text":"<ul> <li>Add UI Tests: Create tests for <code>game-ui.ts</code></li> <li>Expand API Tests: Improve <code>BulletBuzzGame.ts</code> coverage</li> <li>Shop System Tests: Add tests for LevelSystem shop functions</li> </ul>"},{"location":"testing/test-coverage-report/#2-medium-term","title":"2. Medium Term","text":"<ul> <li>Integration Tests: End-to-end game flow testing</li> <li>Performance Tests: Memory and performance validation</li> <li>Error Handling: Test error conditions and edge cases</li> </ul>"},{"location":"testing/test-coverage-report/#3-long-term","title":"3. Long Term","text":"<ul> <li>Visual Regression: Screenshot-based UI testing</li> <li>Accessibility Tests: Screen reader and keyboard navigation</li> <li>Cross-browser Tests: Browser compatibility testing</li> </ul>"},{"location":"testing/test-coverage-report/#coverage-goals","title":"\ud83d\udcc8 Coverage Goals","text":""},{"location":"testing/test-coverage-report/#target-metrics-by-end-of-next-sprint","title":"Target Metrics (By End of Next Sprint)","text":"<ul> <li>Overall Statements: 80%+ (currently 51%)</li> <li>Overall Branches: 75%+ (currently 43%)</li> <li>Overall Functions: 85%+ (currently 61%)</li> <li>Overall Lines: 80%+ (currently 52%)</li> </ul>"},{"location":"testing/test-coverage-report/#file-specific-targets","title":"File-Specific Targets","text":"<ul> <li><code>game-ui.ts</code>: 70%+ (currently 0%)</li> <li><code>BulletBuzzGame.ts</code>: 80%+ (currently 44%)</li> <li><code>LevelSystem.ts</code>: 95%+ (currently 96%)</li> </ul>"},{"location":"testing/test-coverage-report/#continuous-monitoring","title":"\ud83d\udd04 Continuous Monitoring","text":""},{"location":"testing/test-coverage-report/#coverage-tracking","title":"Coverage Tracking","text":"<ul> <li>Automated: Coverage reports on every PR</li> <li>Thresholds: Fail builds if coverage drops below targets</li> <li>Trends: Track coverage improvements over time</li> </ul>"},{"location":"testing/test-coverage-report/#quality-gates","title":"Quality Gates","text":"<ul> <li>Minimum Coverage: 80% for new code</li> <li>Critical Systems: 95%+ for core game logic</li> <li>UI Components: 70%+ for rendering code</li> </ul>"},{"location":"testing/test-coverage-report/#historical-trends","title":"\ud83d\udcca Historical Trends","text":""},{"location":"testing/test-coverage-report/#coverage-improvements-needed","title":"Coverage Improvements Needed","text":"<ul> <li>UI Layer: 0% \u2192 70% target</li> <li>Game API: 44% \u2192 80% target</li> <li>Overall: 51% \u2192 80% target</li> </ul>"},{"location":"testing/test-coverage-report/#success-metrics","title":"Success Metrics","text":"<ul> <li>\u2705 Core Systems: Excellent coverage maintained</li> <li>\u2705 Game Logic: Robust testing in place</li> <li>\u2705 Systems: Comprehensive coverage achieved</li> <li>\u26a0\ufe0f UI Layer: Needs immediate attention</li> <li>\u26a0\ufe0f API Layer: Needs expansion</li> </ul> <p>This coverage report provides a roadmap for improving test quality and ensuring comprehensive validation of all game systems. </p>"},{"location":"testing/unit-testing/","title":"Unit Testing","text":"<p>BulletBuzz includes comprehensive unit tests covering all major game systems.</p>"},{"location":"testing/unit-testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n</code></pre>"},{"location":"testing/unit-testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized by system:</p> <ul> <li><code>BulletBuzzGame.test.ts</code>: Main game class tests</li> <li><code>core/Player.test.ts</code>: Player character tests</li> <li><code>core/Enemy.test.ts</code>: Enemy AI tests</li> <li><code>core/Axe.test.ts</code>: Combat system tests</li> <li><code>systems/CollisionSystem.test.ts</code>: Collision detection tests</li> <li><code>systems/LevelSystem.test.ts</code>: Level progression tests</li> <li><code>systems/SpawnSystem.test.ts</code>: Enemy spawning tests</li> </ul>"},{"location":"testing/unit-testing/#test-coverage","title":"Test Coverage","text":"<p>The test suite covers:</p> <ul> <li>\u2705 Game initialization and state management</li> <li>\u2705 Player movement and controls</li> <li>\u2705 Enemy AI and pathfinding</li> <li>\u2705 Combat mechanics and collision detection</li> <li>\u2705 Pickup collection and attraction</li> <li>\u2705 Level progression and shop system</li> <li>\u2705 Performance monitoring</li> <li>\u2705 Memory management</li> </ul>"},{"location":"testing/unit-testing/#example-test","title":"Example Test","text":"<pre><code>describe('Player', () =&gt; {\n  it('should move towards target position', () =&gt; {\n    const player = new Player(100, 100);\n    player.moveTowards(200, 200);\n\n    expect(player.x).toBeGreaterThan(100);\n    expect(player.y).toBeGreaterThan(100);\n  });\n});\n</code></pre>"}]}